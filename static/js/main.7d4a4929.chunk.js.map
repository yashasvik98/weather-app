{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d4a4929.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div className=\"titles\">\r\n        <h1 className=\"title-name\">Weather Finder</h1>\r\n          \r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props =>(\r\n    <form onSubmit={props.getWeather} className=\"form\">\r\n        <input className=\"city\" type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n        <input className=\"country\" type=\"text\" name=\"country\" placeholder=\"Country\"/>\r\n        <button className=\"btn\" type=\"submit\">Get Weather</button>\r\n    </form>\r\n);\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather\">\r\n        {props.city && props.country && <p className=\"location\">{props.city},{props.country}</p>}\r\n        {props.temperature && <p className=\"temperature\">{props.temperature}&#8451;</p>}\r\n        {props.humidity && <p className=\"humidity\">Humidity: {props.humidity}</p>}\r\n        {props.description && <p className=\"conditions\">Conditions: {props.description}</p>}\r\n        {props.error && <p className=\"error\">{props.error}</p>}\r\n                \r\n    </div>\r\n);\r\nexport default Weather;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport { async } from \"q\";\n\nconst API_KEY=\"e9a5fe2cc5206f570c3e0b7bf2a6e24e\";\n\nclass App extends React.Component{\n  state={\n    temperature:undefined,\n    city: undefined,\n    country:undefined,\n    humidity:undefined,\n    description:undefined,\n    error:undefined\n  }\n  getWeather=async (e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data=await api_call.json();\n    if(city && country){\n      this.setState({\n        temperature:data.main.temp,\n        city:data.name,\n        country:data.sys.country,\n        humidity:data.main.humidity,\n        description:data.weather[0].description,\n        error:\"\"\n      });\n    }\n    else{\n      this.setState({\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        humidity:undefined,\n        description:undefined,\n        error:\"Please enter the city and country\"\n      });\n    }\n    \n  }\n  render(){\n    return(\n      <div>\n        <Titles />\n        <Form getWeather={this.getWeather}/>\n        <Weather \n        temperature={this.state.temperature}\n        city={this.state.city}\n        country={this.state.country}\n        humidity={this.state.humidity}\n        description={this.state.description}\n        error={this.state.error}\n        />\n      </div>\n      \n    );\n  }\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}